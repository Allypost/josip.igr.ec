---
import type { ImageMetadata } from "astro";
import type { DeepPartial } from "ts-essentials";
import { SEO, type Link, type Meta, type TwitterCardType } from "astro-seo";
import merge from "lodash/fp/merge";

import { links, SITE_DESCRIPTION, SITE_TITLE } from "~/app/consts";
import { remoteCdnUrl } from "~/app/helpers";
import type { HTMLAttributes } from "astro/types";
import type { SetNonNullable, Simplify } from "type-fest";

type SeoPropsStrict = {
  title?: string;
  titleTemplate?: string;
  titleDefault?: string;
  charset?: string;
  description?: string;
  canonical?: URL | string;
  nofollow?: boolean;
  noindex?: boolean;
  languageAlternates?: {
    href: URL | string;
    hrefLang: string;
  }[];
  openGraph?: {
    basic: {
      title: string;
      type: string;
      image: string;
      url?: URL | string;
    };
    optional?: {
      audio?: string;
      description?: string;
      determiner?: string;
      locale?: string;
      localeAlternate?: string[];
      siteName?: string;
      video?: string;
    };
    image?: {
      url?: URL | string;
      secureUrl?: URL | string;
      type?: string;
      width?: number;
      height?: number;
      alt?: string;
    };
    article?: {
      publishedTime?: string;
      modifiedTime?: string;
      expirationTime?: string;
      authors?: string[];
      section?: string;
      tags?: string[];
    };
  };
  twitter?: {
    card?: TwitterCardType;
    site?: string;
    creator?: string;
    title?: string;
    description?: string;
    image?: URL | string;
    imageAlt?: string;
  };
  fediverse?: {
    creator?: string[];
  };
  extend?: {
    link?: Partial<Link>[];
    meta?: Partial<Meta>[];
  };
  surpressWarnings?: boolean;
};

export type SeoProps = DeepPartial<SeoPropsStrict>;

type PreloadFile = Simplify<
  SetNonNullable<Required<Pick<HTMLAttributes<"link">, "href" | "as" | "type">>>
>;

export type ImageProp = {
  data?: string | ImageMetadata;
  alt?: string;
};

type Props = {
  title?: string;
  description?: string;
  image?: ImageProp;
  seo?: SeoProps;
  preloadFiles?: PreloadFile[];
};

const {
  title,
  description = SITE_DESCRIPTION,
  image: imageProp,
  seo: seoProp = {},
  preloadFiles,
} = Astro.props;
const imageData = imageProp?.data;

const image = {
  src: undefined,
  metadata: undefined,
  alt: imageProp?.alt,
} as {
  src: string | undefined;
  metadata: ImageMetadata | undefined;
  alt: string | undefined;
};

switch (typeof imageData) {
  case "undefined":
    break;
  case "string":
    image.src = imageData;
    break;
  default:
    try {
      image.src = new URL(imageData.src).toString();
    } catch {
      // ignore errors
    }
    try {
      image.src = new URL(imageData.src, import.meta.env.SITE).toString();
    } catch {
      // ignore errors
    }
    image.metadata = imageData;
    break;
}

const seoData = merge(
  {
    title: title ?? SITE_TITLE,
    titleDefault: SITE_TITLE,
    titleTemplate: `%s | ${SITE_TITLE}`,
    openGraph: {
      basic: {
        type: "website",
        title: title ?? SITE_TITLE,
        url: Astro.url,
        image: image.src ?? "",
      },
      optional: {
        description,
        locale: "en_US",
        siteName: SITE_TITLE,
      },
      image: {
        alt: image.alt,
        url: image.src,
        height: image.metadata?.height,
        width: image.metadata?.width,
        type: image.metadata?.format
          ? `image/${image.metadata.format}`
          : undefined,
      },
    },
    twitter: {
      card: "summary_large_image",
      title,
      description,
      image: image.src,
    },
    fediverse: {
      creator: [links.mastodon.handle],
    },
    surpressWarnings: true,
  } as SeoPropsStrict,
  seoProp,
);

const preloadFonts = [
  "IosevkAllyP-Regular.latin",
  "IosevkAllyP-Bold.latin",
  "IosevkAllySP-Regular.latin",
  "IosevkAllySP-Bold.latin",
  "IosevkAlly-Bold.latin",
].map((x) => `/pkg/font/IosevkAlly/${x}.woff2`);
---

<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />

<link rel="icon" type="image/x-icon" href="/favicon.ico" />
<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
<link rel="manifest" href="/site.webmanifest" />
<link rel="me" href={links.mastodon.href} />
<link
  rel="alternate"
  type="application/rss+xml"
  title={SITE_TITLE}
  href={new URL("blog.xml", Astro.site)}
/>

<link rel="preconnect" href={remoteCdnUrl()} crossorigin />
{
  preloadFonts.map((x) => (
    <link
      rel="preload"
      href={remoteCdnUrl(x)}
      as="font"
      type="font/woff2"
      crossorigin
    />
  ))
}
{preloadFiles?.map((x) => <link rel="preload" {...x} />)}
<link
  rel="stylesheet"
  href={remoteCdnUrl("/pkg/font/IosevkAlly/full-family.css")}
/>

<SEO {...seoData} />
{
  seoData.fediverse?.creator?.map((handle) => (
    <meta name="fediverse:creator" content={handle} />
  ))
}

<script is:inline type="module">
  /*! instant.page v5.2.0 - (C) 2019-2023 Alexandre Dieulot - https://instant.page/license */
  let t,
    e,
    n,
    o,
    i,
    a = null,
    s = 65,
    c = new Set();
  const r = 1111;
  function d(t) {
    o = performance.now();
    const e = t.target.closest("a");
    m(e) && p(e.href, "high");
  }
  function u(t) {
    if (performance.now() - o < r) return;
    if (!("closest" in t.target)) return;
    const e = t.target.closest("a");
    m(e) &&
      (e.addEventListener("mouseout", f, { passive: !0 }),
      (i = setTimeout(() => {
        p(e.href, "high"), (i = void 0);
      }, s)));
  }
  function l(t) {
    const e = t.target.closest("a");
    m(e) && p(e.href, "high");
  }
  function f(t) {
    (t.relatedTarget &&
      t.target.closest("a") == t.relatedTarget.closest("a")) ||
      (i && (clearTimeout(i), (i = void 0)));
  }
  function h(t) {
    if (performance.now() - o < r) return;
    const e = t.target.closest("a");
    if (t.which > 1 || t.metaKey || t.ctrlKey) return;
    if (!e) return;
    e.addEventListener(
      "click",
      function (t) {
        1337 != t.detail && t.preventDefault();
      },
      { capture: !0, passive: !1, once: !0 },
    );
    const n = new MouseEvent("click", {
      view: window,
      bubbles: !0,
      cancelable: !1,
      detail: 1337,
    });
    e.dispatchEvent(n);
  }
  function m(o) {
    if (o && o.href && (!n || "instant" in o.dataset)) {
      if (o.origin != location.origin) {
        if (!(e || "instant" in o.dataset) || !a) return;
      }
      if (
        ["http:", "https:"].includes(o.protocol) &&
        ("http:" != o.protocol || "https:" != location.protocol) &&
        (t || !o.search || "instant" in o.dataset) &&
        !(
          (o.hash &&
            o.pathname + o.search == location.pathname + location.search) ||
          "noInstant" in o.dataset
        )
      )
        return !0;
    }
  }
  function p(t, e = "auto") {
    if (c.has(t)) return;
    const n = document.createElement("link");
    (n.rel = "prefetch"),
      (n.href = t),
      (n.fetchPriority = e),
      (n.as = "document"),
      document.head.appendChild(n),
      c.add(t);
  }
  !(function () {
    if (!document.createElement("link").relList.supports("prefetch")) return;
    const o =
        "instantVaryAccept" in document.body.dataset || "Shopify" in window,
      i = navigator.userAgent.indexOf("Chrome/");
    i > -1 &&
      (a = parseInt(navigator.userAgent.substring(i + "Chrome/".length)));
    if (o && a && a < 110) return;
    const c = "instantMousedownShortcut" in document.body.dataset;
    (t = "instantAllowQueryString" in document.body.dataset),
      (e = "instantAllowExternalLinks" in document.body.dataset),
      (n = "instantWhitelist" in document.body.dataset);
    const r = { capture: !0, passive: !0 };
    let f = !1,
      v = !1,
      g = !1;
    if ("instantIntensity" in document.body.dataset) {
      const t = document.body.dataset.instantIntensity;
      if (t.startsWith("mousedown"))
        (f = !0), "mousedown-only" == t && (v = !0);
      else if (t.startsWith("viewport")) {
        const e = navigator.connection && navigator.connection.saveData,
          n =
            navigator.connection &&
            navigator.connection.effectiveType &&
            navigator.connection.effectiveType.includes("2g");
        e ||
          n ||
          ("viewport" == t
            ? document.documentElement.clientWidth *
                document.documentElement.clientHeight <
                45e4 && (g = !0)
            : "viewport-all" == t && (g = !0));
      } else {
        const e = parseInt(t);
        isNaN(e) || (s = e);
      }
    }
    v || document.addEventListener("touchstart", d, r);
    f
      ? c || document.addEventListener("mousedown", l, r)
      : document.addEventListener("mouseover", u, r);
    c && document.addEventListener("mousedown", h, r);
    if (g) {
      let t = window.requestIdleCallback;
      t ||
        (t = (t) => {
          t();
        }),
        t(
          function () {
            const t = new IntersectionObserver((e) => {
              e.forEach((e) => {
                if (e.isIntersecting) {
                  const n = e.target;
                  t.unobserve(n), p(n.href);
                }
              });
            });
            document.querySelectorAll("a").forEach((e) => {
              m(e) && t.observe(e);
            });
          },
          { timeout: 1500 },
        );
    }
  })();
</script>
